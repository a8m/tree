package tree

import (
	"testing"
)

func TestFormatBytes(t *testing.T) {
	data := []struct {
		val int64
		res string
	}{
		{0, "0"}, // 0
		{1, "1"},
		{2, "2"},
		{9, "9"},
		{10, "10"},
		{11, "11"},
		{99, "99"},
		{100, "100"},
		{101, "101"},
		{999, "999"},

		{1000, "1.0K"}, // 10
		{1001, "1.0K"},
		{1002, "1.0K"},
		{1202, "1.2K"},
		{9202, "9.2K"},
		{9849, "9.8K"},
		{9900, "9.9K"},
		{9900, "9.9K"},
		{9999, "10K"},
		{10000, "10K"},
		{10001, "10K"}, // 20
		{10022, "10K"},
		{10333, "10K"},
		{14444, "14K"},
		{19999, "20K"},

		{1000 * 1024, "1.0M"},
		{1000 * 1001, "1.0M"},
		{1000 * 1002, "1.0M"},
		{1000 * 1202, "1.2M"},
		{1000 * 9202, "9.2M"},
		{1000 * 9202, "9.2M"}, // 30
		{1000 * 9849, "9.8M"},
		{1000 * 9900, "9.9M"},
		{1000 * 9900, "9.9M"},
		{1000 * 9999, "10M"},
		{1000 * 10000, "10M"},
		{1000 * 10001, "10M"},
		{1000 * 10022, "10M"},
		{1000 * 10333, "10M"},
		{1000 * 14444, "14M"},
		{1000 * 19999, "20M"}, // 40
	}

	for i := range data {
		val := data[i].val
		res := data[i].res

		if tst := formatBytes(val); tst != res {
			t.Errorf("data not equal: %v: %v\n tst=<%s>\n got <%s>\n",
				i, val, res, tst)
		}
	}
}

func TestFormatBytesKiB(t *testing.T) {
	data := []struct {
		val int64
		res string
	}{
		{0, "0"}, // 0
		{1, "1"},
		{2, "2"},
		{9, "9"},
		{10, "10"},
		{11, "11"},
		{99, "99"},
		{100, "100"},
		{101, "101"},
		{999, "999"},

		{1024 + 0, "1.0K"}, // 10
		{1024 + 1, "1.0K"},
		{1024 + 2, "1.0K"},
		{1024 + 202, "1.2K"},

		{1024*1024 - 2, "1024K"},
		{1024*1024 - 1, "1024K"}, // 15
		{1024 * 1024, "1.0M"},
		{1024*1024 + 1, "1.0M"},
		{1024*1024 + 2, "1.0M"},
	}

	for i := range data {
		val := data[i].val
		res := data[i].res

		if tst := formatBytesKiB(val); tst != res {
			t.Errorf("data not equal: %v: %v\n tst=<%s>\n got <%s>\n",
				i, val, res, tst)
		}
	}
}
